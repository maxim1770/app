version: "3.8"
services:

  frontend:
    container_name: frontend
    image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
    command: bash -c "npm run build"
    expose:
      - 5173
    build:
      context: ./frontend
      args:
        FRONTEND_ENV: ${FRONTEND_ENV-production}
  db:
    container_name: db
    image: postgres:latest
    restart: always
    volumes:
      - ./app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME?Variable not set}.app-db-data == true
    networks:
      - custom
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - custom
  backend:
    container_name: backend
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    depends_on:
      - db
    command: /bin/sh -c "initial_db_and_start_server.production.sh"
    expose:
      - 8000
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
    networks:
      - custom
  nginx:
    container_name: nginx
    build:
      context: ./nginx
    ports:
      - 80:80
    restart: always
    depends_on:
      - backend
      - frontend
      - pgadmin
    networks:
      - custom

volumes:
  app-db-data:

networks:
  custom:
    driver: bridge